# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_REGISTRY: hub.docker.com
  IMAGE_NAME: jmatejka/happy-bank-core
  PYTHON_VERSION: 3.9
  POETRY_VERSION: 1.1.2

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check conventional commits
        uses: wagoid/commitlint-github-action@v2

      - name: Run shellcheck for all shell scripts in this repo
        run: find . -type f -and -name "*.sh" -exec shellcheck {} \;

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: View poetry version
        run: poetry --version

      - name: Install dependencies
        run: python -m poetry install

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          python -m poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          python -m poetry run flake8 . --exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
          
      - name: Check python code format
        uses: psf/black@stable
        with:
          options: "--check --diff --verbose"
          src: "./happy_bank_core"
          version: "21.5b1"

  test:
    needs: [ lint ]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set shell scripts executable
        run: find . -type f -and -name "*.sh" -exec chmod u+x {} \;

      - name: Run all shell scripts in this repo
        run: find . -type f -and -name "*.sh" -exec bash -c {} \;

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: View poetry version
        run: poetry --version

      - name: Install dependencies
        run: python -m poetry install

      - name: Test with pytest
        run: python -m poetry run pytest -v tests/

  release:
    needs: [ lint, test ]

    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: git fetch --prune origin +refs/heads/main:refs/remotes/origin/main

      - name: Setup Python Semantic Release
        run: |
          python3 -m pip install python-semantic-release

      - name: Python Semantic Release - show next version
        run: |
          NEW_VERSION=$(semantic-release print-version)
          echo "${NEW_VERSION}"
          [[ -n ${NEW_VERSION} ]] \
            && echo -n "new_version=${NEW_VERSION}" >> $GITHUB_ENV \
            || echo -n "new_version=dirty" >> $GITHUB_ENV

      - name: Python Semantic Release - publish
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          semantic-release publish

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.JM_DOCKER_USERNAME }}
          password: ${{ secrets.JM_DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.7.0
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.new_version }}
